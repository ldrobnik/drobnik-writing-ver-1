{"version":3,"file":"progress.directive.js","sourceRoot":"","sources":["../../.tmp/progressbar/progress.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AAI9D,qDAAqD;AACrD,iDAAiD;AAEjD;IADA;QAmBwC,aAAQ,GAAW,IAAI,CAAC;QAEvD,SAAI,GAAS,EAAE,CAAC;QAEb,SAAI,GAAU,GAAG,CAAC;IAY9B,CAAC;IA3BC,sBAAW,kCAAG;QAHd,8CAA8C;aAG9C;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACnB,CAAC;aAED,UAAe,CAAQ;YACrB,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAgB;gBACjC,GAAG,CAAC,qBAAqB,EAAE,CAAC;YAC9B,CAAC,CAAC,CAAC;QACL,CAAC;;;OAPA;IAeM,kCAAM,GAAb,UAAc,GAAgB;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,GAAG,CAAC,UAAU,GAAG,MAAM,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,CAAC;IAEM,qCAAS,GAAhB,UAAiB,GAAgB;QAC/B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9C,CAAC;IA/BQ;QAAR,KAAK,EAAE;;sDAAwB;IAKhC;QAFC,WAAW,CAAC,UAAU,CAAC;QACvB,KAAK,EAAE;;;gDAGP;IAS8B;QAA9B,WAAW,CAAC,gBAAgB,CAAC;;uDAAgC;IAlBnD,iBAAiB;QAD7B,SAAS,CAAC,EAAC,QAAQ,EAAE,yBAAyB,EAAC,CAAC;OACpC,iBAAiB,CAkC7B;IAAD,wBAAC;CAAA,AAlCD,IAkCC;SAlCY,iBAAiB","sourcesContent":["import { Directive, HostBinding, Input } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\n\n// todo: progress element conflict with bootstrap.css\n// todo: need hack: replace host element with div\n@Directive({selector: 'bs-progress, [progress]'})\nexport class ProgressDirective  {\n  /** if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4) */\n  @Input() public animate:boolean;\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  public get max():number {\n    return this._max;\n  }\n\n  public set max(v:number) {\n    this._max = v;\n    this.bars.forEach((bar:BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') public addClass:boolean = true;\n\n  public bars:any[] = [];\n\n  protected _max:number = 100;\n\n  public addBar(bar:BarComponent):void {\n    if (!this.animate) {\n      bar.transition = 'none';\n    }\n    this.bars.push(bar);\n  }\n\n  public removeBar(bar:BarComponent):void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}