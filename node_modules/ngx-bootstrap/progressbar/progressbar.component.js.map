{"version":3,"file":"progressbar.component.js","sourceRoot":"","sources":["../../.tmp/progressbar/progressbar.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,eAAe,CAAC;AACjD,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AACzD,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC;AAoBjC;IAkBE,8BAAmB,MAAyB;QANrC,cAAS,GAAY,KAAK,CAAC;QAOhC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAZQ,sBAAW,uCAAK;QADzB,0HAA0H;aACjH,UAAiB,KAAqB;YAC7C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAAA,CAAC;IAGF,sBAAW,uCAAK;aAAhB;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IAdQ;QAAR,KAAK,EAAE;;yDAAwB;IAEvB;QAAR,KAAK,EAAE;;qDAAmB;IAElB;QAAR,KAAK,EAAE;;sDAAoB;IAEnB;QAAR,KAAK,EAAE;;;qDAGP;IAXU,oBAAoB;QAlBhC,SAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,oZAST;YACD,MAAM,EAAE,CAAC,8CAIR,CAAC;SACH,CAAC;yCAmB2B,iBAAiB;OAlBjC,oBAAoB,CAqBhC;IAAD,2BAAC;CAAA,AArBD,IAqBC;SArBY,oBAAoB","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { isBs3 } from '../utils';\n\n@Component({\n  selector: 'progressbar',\n  template: `\n    <div progress [animate]=\"animate\" [max]=\"max\" [style.width]=\"!isBs3 ? '100%' : 'auto'\">\n      <bar [type]=\"type\" [value]=\"_value\" *ngIf=\"!isStacked\">\n          <ng-content></ng-content>\n      </bar>\n      <template [ngIf]=\"isStacked\">\n        <bar *ngFor=\"let item of _value\" [type]=\"item.type\" [value]=\"item.value\">{{item.label}}</bar>\n      </template>\n    </div>\n  `,\n  styles: [`\n    :host {\n      width: 100%;\n    }\n  `]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated (note: not supported by Bootstrap 4) */\n  @Input() public animate:boolean;\n  /** maximum total value of progress element */\n  @Input() public max:number;\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() public type:string;\n  /** current value of progress bar. Could be a number or array of objects like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"} */\n  @Input() public set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  };\n  public isStacked: boolean = false;\n  public _value: number | any[];\n  public get isBs3(): boolean {\n    return isBs3();\n  }\n\n  public constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}