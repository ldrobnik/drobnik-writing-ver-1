{"version":3,"file":"tooltip.directive.js","sourceRoot":"","sources":["../../.tmp/tooltip/tooltip.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive, Input, TemplateRef, ViewContainerRef, Output, EventEmitter,\n  Renderer, ElementRef, OnInit, OnDestroy\n} from '@angular/core';\nimport { TooltipContainerComponent } from './tooltip-container.component';\nimport { TooltipConfig } from './tooltip.config';\nimport { ComponentLoaderFactory, ComponentLoader } from '../component-loader';\nimport { OnChange } from '../utils/decorators';\n\n@Directive({\n  selector: '[tooltip], [tooltipHtml]',\n  exportAs: 'bs-tooltip'\n})\nexport class TooltipDirective implements OnInit, OnDestroy {\n  /**\n   * Content to be displayed as tooltip.\n   */\n  @OnChange()\n  @Input() public tooltip: string | TemplateRef<any>;\n  /** Fired when tooltip content changes */\n  @Output() public tooltipChange: EventEmitter<string | TemplateRef<any>> = new EventEmitter();\n\n  /**\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\n   */\n  @Input() public placement: string;\n  /**\n   * Specifies events that should trigger. Supports a space separated list of\n   * event names.\n   */\n  @Input() public triggers: string;\n  /**\n   * A selector specifying the element the tooltip should be appended to.\n   * Currently only supports \"body\".\n   */\n  @Input() public container: string;\n\n  /**\n   * Returns whether or not the tooltip is currently being shown\n   */\n  @Input()\n  public get isOpen(): boolean { return this._tooltip.isShown; }\n\n  public set isOpen(value: boolean) {\n    if (value) {this.show();} else {this.hide();}\n  }\n\n  /**\n   * Allows to disable tooltip\n   */\n  @Input() public isDisabled: boolean;\n\n  /**\n   * Css class for tooltip container\n   */\n  @Input() public containerClass: string = '';\n\n  /**\n   * Emits an event when the tooltip is shown\n   */\n  @Output() public onShown: EventEmitter<any>;\n  /**\n   * Emits an event when the tooltip is hidden\n   */\n  @Output() public onHidden: EventEmitter<any>;\n\n  /* tslint:disable */\n  /** @deprecated - please use `tooltip` instead */\n  @Input('tooltipHtml')\n  public set htmlContent(value: string | TemplateRef<any>) {\n    console.warn('tooltipHtml was deprecated, please use `tooltip` instead');\n    this.tooltip = value;\n  }\n\n  /** @deprecated - please use `placement` instead */\n  @Input('tooltipPlacement')\n  public set _placement(value: string) {\n    console.warn('tooltipPlacement was deprecated, please use `placement` instead');\n    this.placement = value;\n  }\n\n  /** @deprecated - please use `isOpen` instead*/\n  @Input('tooltipIsOpen')\n  public set _isOpen(value: boolean) {\n    console.warn('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    this.isOpen = value;\n  }\n\n  public get _isOpen(): boolean {\n    console.warn('tooltipIsOpen was deprecated, please use `isOpen` instead');\n    return this.isOpen;\n  }\n\n  /** @deprecated - please use `isDisabled` instead */\n  @Input('tooltipEnable')\n  public set _enable(value: boolean) {\n    console.warn('tooltipEnable was deprecated, please use `isDisabled` instead');\n    this.isDisabled = value === true;\n  }\n\n  public get _enable(): boolean {\n    console.warn('tooltipEnable was deprecated, please use `isDisabled` instead');\n    return this.isDisabled === true;\n  }\n\n  /** @deprecated - please use `container=\"body\"` instead */\n  @Input('tooltipAppendToBody')\n  public set _appendToBody(value: boolean) {\n    console.warn('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    this.container = value ? 'body' : this.container;\n  }\n\n  public get _appendToBody(): boolean {\n    console.warn('tooltipAppendToBody was deprecated, please use `container=\"body\"` instead');\n    return this.container === 'body';\n  }\n\n  /** @deprecated - removed, will be added to configuration */\n  @Input('tooltipAnimation') public _animation: boolean = true;\n\n  /** @deprecated - will replaced with customClass */\n  @Input('tooltipClass')\n  public set _popupClass(value: string) {\n    console.warn('tooltipClass deprecated');\n  }\n\n  /** @deprecated - removed */\n  @Input('tooltipContext')\n  public set _tooltipContext(value: any) {\n    console.warn('tooltipContext deprecated');\n  }\n\n  /** @deprecated */\n  @Input('tooltipPopupDelay') public _delay: number = 0;\n\n  /** @deprecated */\n  @Input('tooltipFadeDuration') public _fadeDuration: number = 150;\n\n  /** @deprecated -  please use `triggers` instead */\n  @Input('tooltipTrigger')\n  public get _tooltipTrigger(): string|Array<string> {\n    console.warn('tooltipTrigger was deprecated, please use `triggers` instead');\n    return this.triggers;\n  };\n\n  public set _tooltipTrigger(value: string|Array<string>) {\n    console.warn('tooltipTrigger was deprecated, please use `triggers` instead');\n    this.triggers = (value || '').toString();\n  };\n\n  /** @deprecated */\n  @Output() public tooltipStateChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n  /* tslint:enable */\n  protected _delayTimeoutId: number | any;\n\n  private _tooltip: ComponentLoader<TooltipContainerComponent>;\n\n  // tslint:disable-next-line\n  public constructor(_viewContainerRef: ViewContainerRef,\n                     _renderer: Renderer,\n                     _elementRef: ElementRef,\n                     cis: ComponentLoaderFactory,\n                     config: TooltipConfig) {\n    this._tooltip = cis\n      .createLoader<TooltipContainerComponent>(_elementRef, _viewContainerRef, _renderer)\n      .provide({provide: TooltipConfig, useValue: config});\n\n    Object.assign(this, config);\n    this.onShown = this._tooltip.onShown;\n    this.onHidden = this._tooltip.onHidden;\n  }\n\n  public ngOnInit(): void {\n    this._tooltip.listen({\n      triggers: this.triggers,\n      show: () => this.show()\n    });\n    this.tooltipChange.subscribe((value: any) => {\n      if (!value) {\n        this._tooltip.hide();\n      }\n    });\n  }\n\n  /**\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public toggle(): void {\n    if (this.isOpen) {\n      return this.hide();\n    }\n\n    this.show();\n  }\n\n  /**\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public show(): void {\n    if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.tooltip) {\n      return;\n    }\n\n    const showTooltip = () => this._tooltip\n      .attach(TooltipContainerComponent)\n      .to(this.container)\n      .position({attachment: this.placement})\n      .show({\n        content: this.tooltip,\n        placement: this.placement,\n        containerClass: this.containerClass\n      });\n\n    if (this._delay) {\n      this._delayTimeoutId = setTimeout(() => { showTooltip(); }, this._delay);\n    } else {\n      showTooltip();\n    }\n  }\n\n  /**\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\n   * the tooltip.\n   */\n  public hide(): void {\n    if (this._delayTimeoutId) {\n      clearTimeout(this._delayTimeoutId);\n      this._delayTimeoutId = undefined;\n    }\n\n    if (!this._tooltip.isShown) {\n      return;\n    }\n\n    this._tooltip.instance.classMap.in = false;\n    setTimeout(() => {\n      this._tooltip.hide();\n    }, this._fadeDuration);\n  }\n\n  public ngOnDestroy(): void {\n    this._tooltip.dispose();\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}