var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, Input, Output } from '@angular/core';
var BsDatepickerMonthViewComponent = (function () {
    function BsDatepickerMonthViewComponent() {
        this.onSelect = new EventEmitter();
        this.onHover = new EventEmitter();
    }
    BsDatepickerMonthViewComponent.prototype.selectDay = function (event) {
        this.onSelect.emit(event);
    };
    BsDatepickerMonthViewComponent.prototype.hoverDay = function (day, isHovered) {
        this.onHover.emit({ day: day, isHovered: isHovered });
    };
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BsDatepickerMonthViewComponent.prototype, "month", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], BsDatepickerMonthViewComponent.prototype, "options", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], BsDatepickerMonthViewComponent.prototype, "onSelect", void 0);
    __decorate([
        Output(),
        __metadata("design:type", Object)
    ], BsDatepickerMonthViewComponent.prototype, "onHover", void 0);
    BsDatepickerMonthViewComponent = __decorate([
        Component({
            selector: "bs-datepicker-month-view",
            // FIX: day select and hover should mutate day or use separate component
            // changeDetection: ChangeDetectionStrategy.OnPush,
            template: "\n    <table role=\"grid\" class=\"days weeks\">\n      <thead>\n      <tr>\n        <th *ngIf=\"options.showWeekNumbers\"></th><!--if show weeks-->\n        <th *ngFor=\"let weekday of month.weekdays; let i = index\"\n            aria-label=\"weekday\">{{ month.weekdays[i] }}\n        </th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor=\"let week of month.weeks; let i = index\">\n        <td class=\"week\" *ngIf=\"options.showWeekNumbers\"><span>{{ month.weekNumbers[i] }}</span>\n        </td>\n        <td *ngFor=\"let day of week.days\" role=\"gridcell\">\n          <span bsDatepickerDayDecorator\n                [day]=\"day\"\n                (click)=\"selectDay(day)\"\n                (mouseenter)=\"hoverDay(day, true)\"\n                (mouseleave)=\"hoverDay(day, false)\">{{ day.label }}</span>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n  "
        })
    ], BsDatepickerMonthViewComponent);
    return BsDatepickerMonthViewComponent;
}());
export { BsDatepickerMonthViewComponent };
//# sourceMappingURL=bs-datepicker-month-view.component.js.map