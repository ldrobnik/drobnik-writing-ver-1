var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// todo: add animations when https://github.com/angular/angular/issues/9947 solved
import { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer } from '@angular/core';
var CollapseDirective = (function () {
    function CollapseDirective(_el, _renderer) {
        /** This event fires as soon as content collapses */
        this.collapsed = new EventEmitter();
        /** This event fires as soon as content becomes visible */
        this.expanded = new EventEmitter();
        // shown
        this.isExpanded = true;
        // hidden
        this.isCollapsed = false;
        // stale state
        this.isCollapse = true;
        // animation state
        this.isCollapsing = false;
        this._el = _el;
        this._renderer = _renderer;
    }
    Object.defineProperty(CollapseDirective.prototype, "collapse", {
        get: function () {
            return this.isExpanded;
        },
        /** A flag indicating visibility of content (shown or hidden) */
        set: function (value) {
            this.isExpanded = value;
            this.toggle();
        },
        enumerable: true,
        configurable: true
    });
    /** allows to manually toggle content visibility */
    CollapseDirective.prototype.toggle = function () {
        if (this.isExpanded) {
            this.hide();
        }
        else {
            this.show();
        }
    };
    /** allows to manually hide content */
    CollapseDirective.prototype.hide = function () {
        this.isCollapse = false;
        this.isCollapsing = true;
        this.isExpanded = false;
        this.isCollapsed = true;
        this.isCollapse = true;
        this.isCollapsing = false;
        this.display = 'none';
        this.collapsed.emit(this);
    };
    /** allows to manually show collapsed content */
    CollapseDirective.prototype.show = function () {
        this.isCollapse = false;
        this.isCollapsing = true;
        this.isExpanded = true;
        this.isCollapsed = false;
        this.display = 'block';
        // this.height = 'auto';
        this.isCollapse = true;
        this.isCollapsing = false;
        this._renderer.setElementStyle(this._el.nativeElement, 'overflow', 'visible');
        this._renderer.setElementStyle(this._el.nativeElement, 'height', 'auto');
        this.expanded.emit(this);
    };
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], CollapseDirective.prototype, "collapsed", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], CollapseDirective.prototype, "expanded", void 0);
    __decorate([
        HostBinding('style.display'),
        __metadata("design:type", String)
    ], CollapseDirective.prototype, "display", void 0);
    __decorate([
        HostBinding('class.in'),
        HostBinding('class.show'),
        HostBinding('attr.aria-expanded'),
        __metadata("design:type", Boolean)
    ], CollapseDirective.prototype, "isExpanded", void 0);
    __decorate([
        HostBinding('attr.aria-hidden'),
        __metadata("design:type", Boolean)
    ], CollapseDirective.prototype, "isCollapsed", void 0);
    __decorate([
        HostBinding('class.collapse'),
        __metadata("design:type", Boolean)
    ], CollapseDirective.prototype, "isCollapse", void 0);
    __decorate([
        HostBinding('class.collapsing'),
        __metadata("design:type", Boolean)
    ], CollapseDirective.prototype, "isCollapsing", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], CollapseDirective.prototype, "collapse", null);
    CollapseDirective = __decorate([
        Directive({
            selector: '[collapse]',
            exportAs: 'bs-collapse',
            /* tslint:disable-next-line */
            host: { '[class.collapse]': 'true' } /*,
            animations: [
              trigger('active', [
                state('void', style({height: 0})),
                state('closed', style({height: 0})),
                state('open', style({height: '*'})),
                transition('void => closed', [animate(0)]),
                transition('closed => open', [animate('350ms ease-out')]),
                transition('open => closed', [animate('350ms ease-out')])
              ])
            ]*/
        }),
        __metadata("design:paramtypes", [ElementRef, Renderer])
    ], CollapseDirective);
    return CollapseDirective;
}());
export { CollapseDirective };
//# sourceMappingURL=collapse.directive.js.map