var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, EventEmitter, HostBinding, Input, Output, ElementRef, Renderer } from '@angular/core';
import { TabsetComponent } from './tabset.component';
var TabDirective = (function () {
    function TabDirective(tabset, elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        /** fired when tab became active, $event:Tab equals to selected instance of Tab component */
        this.select = new EventEmitter();
        /** fired when tab became inactive, $event:Tab equals to deselected instance of Tab component */
        this.deselect = new EventEmitter();
        /** fired before tab will be removed, $event:Tab equals to instance of removed tab */
        this.removed = new EventEmitter();
        this.addClass = true;
        this.tabset = tabset;
        this.tabset.addTab(this);
    }
    Object.defineProperty(TabDirective.prototype, "customClass", {
        /** if set, will be added to the tab's class atribute */
        get: function () {
            return this._customClass;
        },
        set: function (customClass) {
            if (this._customClass && this._customClass !== customClass) {
                this.renderer.setElementClass(this.elementRef.nativeElement, this._customClass, false);
            }
            this._customClass = customClass;
            if (this._customClass) {
                this.renderer.setElementClass(this.elementRef.nativeElement, this._customClass, true);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TabDirective.prototype, "active", {
        /** tab active state toggle */
        get: function () {
            return this._active;
        },
        set: function (active) {
            var _this = this;
            if (this._active === active) {
                return;
            }
            if (this.disabled && active || !active) {
                if (this._active && !active) {
                    this.deselect.emit(this);
                    this._active = active;
                }
                return;
            }
            this._active = active;
            this.select.emit(this);
            this.tabset.tabs.forEach(function (tab) {
                if (tab !== _this) {
                    tab.active = false;
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    TabDirective.prototype.ngOnInit = function () {
        this.removable = this.removable;
    };
    TabDirective.prototype.ngOnDestroy = function () {
        this.tabset.removeTab(this, { reselect: false, emit: false });
    };
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabDirective.prototype, "heading", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], TabDirective.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TabDirective.prototype, "disabled", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], TabDirective.prototype, "removable", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String),
        __metadata("design:paramtypes", [String])
    ], TabDirective.prototype, "customClass", null);
    __decorate([
        HostBinding('class.active'),
        Input(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], TabDirective.prototype, "active", null);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TabDirective.prototype, "select", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TabDirective.prototype, "deselect", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], TabDirective.prototype, "removed", void 0);
    __decorate([
        HostBinding('class.tab-pane'),
        __metadata("design:type", Boolean)
    ], TabDirective.prototype, "addClass", void 0);
    TabDirective = __decorate([
        Directive({ selector: 'tab, [tab]' }),
        __metadata("design:paramtypes", [TabsetComponent, ElementRef, Renderer])
    ], TabDirective);
    return TabDirective;
}());
export { TabDirective };
//# sourceMappingURL=tab.directive.js.map