{"version":3,"file":"button-radio.directive.js","sourceRoot":"","sources":["../../.tmp/buttons/button-radio.directive.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,WAAW,EACX,UAAU,EACV,YAAY,EACZ,KAAK,EAEL,iBAAiB,EAClB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAwB,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAEzE,MAAM,CAAC,IAAM,4BAA4B,GAAQ;IAC/C,OAAO,EAAE,iBAAiB;IAC1B,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,oBAAoB,EAApB,CAAoB,CAAC;IACnD,KAAK,EAAE,IAAI;CACZ,CAAC;AAEF;;;GAGG;AAEH;IAwCE,8BAAmB,EAAc,EAAU,GAAsB;QAAtB,QAAG,GAAH,GAAG,CAAmB;QAtC1D,aAAQ,GAAQ,QAAQ,CAAC,SAAS,CAAC;QACnC,cAAS,GAAQ,QAAQ,CAAC,SAAS,CAAC;QAsCzC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;IACf,CAAC;IA3BD,sBAAW,0CAAQ;aAAnB;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC;QACtC,CAAC;;;OAAA;IAGM,sCAAO,GAAd;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;YACvB,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,CAAC;QACT,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,MAAM,CAAC;QACT,CAAC;IACH,CAAC;IAMM,uCAAQ,GAAf;QACE,IAAI,CAAC,WAAW,GAAG,OAAO,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC;IAC7D,CAAC;IAEM,qCAAM,GAAb;QACE,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAED,uBAAuB;IACvB,gBAAgB;IACT,yCAAU,GAAjB,UAAkB,KAAU;QAC1B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAC1B,CAAC;IAEM,+CAAgB,GAAvB,UAAwB,EAAO;QAC7B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACrB,CAAC;IAEM,gDAAiB,GAAxB,UAAyB,EAAO;QAC9B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IACtB,CAAC;IA3DQ;QAAR,KAAK,EAAE;;0DAAsB;IAErB;QAAR,KAAK,EAAE;;6DAA6B;IAE5B;QAAR,KAAK,EAAE;;uDAAmB;IAK3B;QADC,WAAW,CAAC,cAAc,CAAC;;;wDAG3B;IAGD;QADC,YAAY,CAAC,OAAO,CAAC;;;;uDAmBrB;IAtCU,oBAAoB;QADhC,SAAS,CAAC,EAAC,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,4BAA4B,CAAC,EAAC,CAAC;yCAyCtD,UAAU,EAAe,iBAAiB;OAxCtD,oBAAoB,CAkEhC;IAAD,2BAAC;CAAA,AAlED,IAkEC;SAlEY,oBAAoB","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  HostBinding,\n  forwardRef,\n  HostListener,\n  Input,\n  OnInit,\n  ChangeDetectorRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nexport const RADIO_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n@Directive({selector: '[btnRadio]', providers: [RADIO_CONTROL_VALUE_ACCESSOR]})\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\n\n  public onChange: any = Function.prototype;\n  public onTouched: any = Function.prototype;\n\n  /** Radio button value, will be set to `ngModel` */\n  @Input() public btnRadio: any;\n  /** If `true` â€” radio button can be unchecked */\n  @Input() public uncheckable: boolean;\n  /** Current value of radio component or group */\n  @Input() public value: any;\n\n  protected el: ElementRef;\n\n  @HostBinding('class.active')\n  public get isActive(): boolean {\n    return this.btnRadio === this.value;\n  }\n\n  @HostListener('click')\n  public onClick(): void {\n    if (this.el.nativeElement.attributes.disabled) {\n      return;\n    }\n\n    if (this.uncheckable && this.btnRadio === this.value) {\n      this.value = undefined;\n      this.onTouched();\n      this.onChange(this.value);\n      return;\n    }\n\n    if (this.btnRadio !== this.value) {\n      this.value = this.btnRadio;\n      this.onTouched();\n      this.onChange(this.value);\n      return;\n    }\n  }\n\n  public constructor(el: ElementRef, private cdr: ChangeDetectorRef) {\n    this.el = el;\n  }\n\n  public ngOnInit(): void {\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\n  }\n\n  public onBlur(): void {\n    this.onTouched();\n  }\n\n  // ControlValueAccessor\n  // model -> view\n  public writeValue(value: any): void {\n    this.value = value;\n    this.cdr.markForCheck();\n  }\n\n  public registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  public registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}